"use strict";
// –õ–∏—Ç–µ—Ä–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö null, undefined, void, never
// –î–∞–Ω–Ω–∞—è —Ç–µ–º–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å—é –º–æ—â—å –∏ —Å—Ç—Ä–æ–≥–æ—Å—Ç—å TS.
// –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π direction –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏—Å–≤–æ–µ–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π:
// "left", "right", "up" –∏–ª–∏ "down".
// –õ—é–±–æ–µ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É –Ω–∞ —ç—Ç–∞–ø–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ TypeScript.
let direction;
direction = "left"; // ‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–æ ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ö–æ–¥–∏—Ç –≤ —Å–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö
// direction = "center"; // ‚ùå –û—à–∏–±–∫–∞ ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ "center" –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–π –Ω–∞–±–æ—Ä
// ‚ùó null –∏ undefined ‚Äî —ç—Ç–æ –∏ –∑–Ω–∞—á–µ–Ω–∏—è, –∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–∏–ø—ã –≤ TypeScript.
let b = undefined;
let b01 = null;
console.log(b, b01);
// üîç –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é (–µ—Å–ª–∏ "strictNullChecks": false),
// null –∏ undefined –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—á–∏—Ç–∞—é—Ç—Å—è –¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤.
// let c: number = undefined; // ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–∫–ª—é—á—ë–Ω–Ω–æ–π —Å—Ç—Ä–æ–≥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ null
// console.log(c);
// ‚úÖ –ù–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–∏—Ç—å —Å—Ç—Ä–æ–≥—É—é –ø—Ä–æ–≤–µ—Ä–∫—É ("strictNullChecks": true), 
// TypeScript –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –ø—Ä–∏—Å–≤–∞–∏–≤–∞—Ç—å null –∏–ª–∏ undefined –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –±–µ–∑ —è–≤–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è.
let d = undefined; // ‚úÖ OK
let e = null; // ‚úÖ OK
let f = undefined; // ‚úÖ OK
// üîí –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç–∏–ø–æ–≤. –ù–∞–ø—Ä–∏–º–µ—Ä:
function calculateTotal(price, discount) {
    // discount –º–æ–∂–µ—Ç –±—ã—Ç—å undefined, –ø–æ—ç—Ç–æ–º—É –≤–∞–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç—Ç–æ —è–≤–Ω–æ:
    return price - (discount ?? 0);
}
// void –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –∫–æ–≥–¥–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–º–µ—Ä –Ω–∏–∂–µ.
function logMessage(message) {
    console.log(message);
}
logMessage('Hello World!!!');
// –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö never. –¢–∏–ø, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å: —Ñ—É–Ω–∫—Ü–∏—è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤–µ—Ä–Ω—ë—Ç –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –∏–ª–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª).
function throwError(msg) {
    throw new Error(msg);
}
function infiniteLoop() {
    while (true) { }
}
function handleStatus(status) {
    switch (status) {
        case "loading":
            return "–ó–∞–≥—Ä—É–∑–∫–∞...";
        case "success":
            return "–ì–æ—Ç–æ–≤–æ!";
        case "error":
            return "–û—à–∏–±–∫–∞!";
        default:
            const _ = status; // ‚úÖ TypeScript –ø—Ä–æ–≤–µ—Ä–∏—Ç, —á—Ç–æ —Å—é–¥–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ø–∞–¥—ë—Ç
            return _;
    }
}
// –º–∞—Å—Å–∏–≤—ã, –∫–æ—Ä—Ç–µ–∂–∏ –∏ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è (enum) 
// –û–±—ä—è–≤–ª–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ —Å —Ç–∏–ø–∞–º–∏.
let arr = [1, 2, 3];
let arr001 = ['a', 'b', 'c'];
// –í—Ç–æ—Ä–æ–π —Å–ø–æ—Å–æ–±.
let arr002 = [1, 2, 3];
let arr003 = ['a', 'b', 'c'];
// –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –º–∞—Å—Å–∏–≤ —Å–æ–¥–µ—Ä–∂–∞–ª –¥–∞–Ω–Ω—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∏–ø–æ–≤ –Ω—É–∂–Ω–æ –æ–±—ä—è–≤–∏—Ç—å –º–∞—Å—Å–∏–≤ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º.
let mixetDataTypes = [1, 'a', 2, 'b', 3, 'c'];
// –ö–æ—Ä—Ç–µ–∂–∏, –º–∞—Å—Å–∏–≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã –∏ –ø–æ—Ä—è–¥–∫–∞ —Ç–∏–ø–æ–≤. 
let userInfo = ['Daurim', 30];
// –ù–∞—Ä—É—à–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É.
// let userInfo: [string, number] = [30, 'Daurim'];
// let userInfo: [string, number] = ['Daurim', 30, 40] 
// –∏–ª–∏ let userInfo: [string, number] = ['Daurim', 'web-dev', 30] 
// –¢–∞–∫ –∂–µ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É 
// enum ‚Äî —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–∏–ø, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –Ω–∞–±–æ—Ä —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.
var Status001;
(function (Status001) {
    Status001[Status001["Todo"] = 0] = "Todo";
    Status001[Status001["InProgress"] = 1] = "InProgress";
    Status001[Status001["Done"] = 2] = "Done";
})(Status001 || (Status001 = {}));
let current = Status001.InProgress;
console.log(current); // 1
console.log(Status001.Done); // 2
// –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0 –∏ –∏–¥—É—Ç –ø–æ –ø–æ—Ä—è–¥–∫—É.
// –°—Ç—Ä–æ–∫–æ–≤—ã–π —Ç–∏–ø enum
var Role;
(function (Role) {
    Role["Admin"] = "ADMIN";
    Role["User"] = "USER";
    Role["Guest"] = "GUEST";
})(Role || (Role = {}));
const userRole = Role.User;
console.log(userRole); // "USER"
// –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å enum:
// –ö–æ–≥–¥–∞ —Ç—ã —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –ª–æ–≥–∏—á–µ—Å–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.
// –ö–æ–≥–¥–∞ –≤–∞–∂–Ω—ã –∏–º–µ–Ω–∞ —ç—Ç–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π.
// –ö–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ, —á—Ç–æ–±—ã –∑–Ω–∞—á–µ–Ω–∏—è –±—ã–ª–∏ —á–∏—Å–ª–æ–≤—ã–º–∏ –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–≤—ã–º–∏.
// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ —á–µ—Ä–µ–∑ union string literal (—á–∞—â–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö):
// type Status = "todo" | "in_progress" | "done";
// –≠—Ç–æ –ª–µ–≥—á–µ –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏, –∫–æ–º–ø–∏–ª—è—Ü–∏–∏, –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª—É—á—à–µ —Å type narrowing.
//# sourceMappingURL=02-data-types.js.map